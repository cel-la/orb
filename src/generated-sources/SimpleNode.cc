/* Generated By:JJTree: Do not edit this line. SimpleNode.cc Version 7.0 */
/* JavaCCOptions:MULTI=false,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
#include <stdio.h>
#include "SimpleNode.h"



SimpleNode::VariantData::VariantData() {
	vt = 0;
	pv = nullptr;
}

SimpleNode::VariantData::VariantData(intptr_t val) {
	vt = 2;
	iv = val;
}

SimpleNode::VariantData::VariantData(const JAVACC_CHAR_TYPE *val) {
	vt = 1;
	sv = val;
}

SimpleNode::VariantData::VariantData(Token *val) {
	vt = 3;
	token = val;
}

SimpleNode::VariantData::VariantData(void *p) {
	vt = 0;
	pv = p;
}

SimpleNode::VariantData::VariantData(SimpleNode *node) {
	vt = 4;
	nv = node;
}

intptr_t SimpleNode::VariantData::toInt() const {
	if (vt == 2)
		return iv;
	else
		return 0;
}

const JAVACC_STRING_TYPE& SimpleNode::VariantData::toString() const {
	if (vt == 1)
		return sv;
	else
		return JAVACC_STRING_TYPE();
}

Token* SimpleNode::VariantData::toToken() const {
	if (vt == 3)
		return token;
	else
		return nullptr;
}

void* SimpleNode::VariantData::toPointer() const {
	if (vt == 0)
		return pv;
	else if (vt == 3)
		return token;
	else
		return nullptr;
}

SimpleNode* SimpleNode::VariantData::toNode() const {
	if (vt == 4)
		return nv;
	else
		return nullptr;
}

 SimpleNode::SimpleNode(int id) :
   id(id)
{
}

SimpleNode::SimpleNode(Orb *parser, int id) :
     parser(parser), id(id) 
{
}

void SimpleNode::jjtOpen() const {
}

void SimpleNode::jjtClose() const {
}

void SimpleNode::jjtSetParent(Node *n) {
    parent = n; 
}
Node *SimpleNode::jjtGetParent() const {
    return parent; 
}

void SimpleNode::jjtAddChild(Node *n, size_t i) {
    if (i >= children.size()) {
      children.resize(i + 1, nullptr);
    }
    children[i] = n;
}

Node *SimpleNode::jjtGetChild(size_t i) const {
    return i < children.size() ? children[i] : nullptr;
}

size_t SimpleNode::jjtGetNumChildren() const {
    return children.size();
 }

//void SimpleNode::jjtSetValue(void * value) {
//    this->value = value; 
// }
//void * SimpleNode::jjtGetValue() const {
//    return value;
//}

void SimpleNode::jjtSetUserData(const JAVACC_CHAR_TYPE *name, VariantData data)
{
	userDatas[name] = data;
}

const SimpleNode::VariantData& SimpleNode::jjtGetUserData(const JAVACC_CHAR_TYPE *name)
{
	std::unordered_map<JAVACC_STRING_TYPE, VariantData>::const_iterator it;

	it = userDatas.find(name);
	if (it != userDatas.end())
		return it->second;
	else
	{
		static VariantData _vd;
		return _vd;
	}
}

Token* SimpleNode::jjtGetFirstToken() const      { return firstToken; }
void   SimpleNode::jjtSetFirstToken(Token *token) { this->firstToken = token; }
Token* SimpleNode::jjtGetLastToken() const       { return lastToken; }
void   SimpleNode::jjtSetLastToken(Token *token)  { this->lastToken = token; }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(string), otherwise overriding toString() is probably all
     you need to do. */

JJString SimpleNode::toString() const { return jjtNodeName[id]; }
JJString SimpleNode::toString(const JJString& prefix) const { return prefix + toString(); }

static JJChar space_char_arr_[] = { ' ', '\0' };
static JJChar newline_char_arr_[] = { '\n', '\0' };
static JJString space = space_char_arr_;
static JJString newline = newline_char_arr_;

  /* Override this method if you want to customize how the node dumps
     out its children. */

void SimpleNode::dumpToBuffer(const JJString& prefix, const JJString& separator, JJString *buffer) const {
    buffer->append(toString(prefix));
    buffer->append(separator);
    for (size_t i = 0; i < children.size(); ++i) {
      SimpleNode *n = (SimpleNode*)children[i];
      if (n != nullptr) {
        n->dumpToBuffer(prefix + space, separator, buffer);
      }
    }
}
  
void SimpleNode::dump(const JJString& prefix) const {
    JJString *buffer = new JJString();
    dumpToBuffer(prefix, newline, buffer);
    for (size_t i = 0; i < buffer->size(); i++) {
      printf("%c", (*buffer)[i]);
    }
    delete buffer;
}

SimpleNode::~SimpleNode() {
    for (size_t i = 0; i < children.size(); ++i) {
      delete children[i];
    }
}
  
/* JavaCC - OriginalChecksum=02721b78eac4f530476836289e15986d (do not edit this line) */
