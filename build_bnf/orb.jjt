
options {
  STATIC=false;
  MULTI=false;
  VISITOR=false;
  NODE_DEFAULT_VOID=true;
  JAVA_UNICODE_ESCAPE=true;
  
  IGNORE_CASE=false;
  OUTPUT_LANGUAGE="c++";
  /* PARSER_INCLUDES=""; */

  FORCE_LA_CHECK=false;
  DEBUG_PARSER = true;
  TRACK_TOKENS = true;
}

PARSER_BEGIN(Orb)



PARSER_END(Orb)

/* WHITE SPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */
TOKEN :
{
    < T_ALIAS: "alias" >
  | < T_AND: "and" >
  | < T_BREAK: "break" >
  | < T_CASE: "case" >
  | < T_CONST: "const" >
  | < T_CONTINUE: "continue" >
  | < T_DEFAULT: "default" >
  | < T_DO: "do" >
  | < T_ELIF: "elif" >
  | < T_ELSE: "else" >
  | < T_END: "end" >
  | < T_FALSE: "false" >
  | < T_FOR: "for" >
  | < T_FUNCTION: "function" >
  | < T_IF: "if" >
  | < T_IS: "is" >
  | < T_LOCAL: "local" >
  | < T_NIL: "nil" >
  | < T_OR: "or" >
  | < T_PACKAGE: "package" >
  | < T_PROPERTY: "property" >
  | < T_PUBLIC: "public" >
  | < T_READONLY: "readonly" >
  | < T_READWRITE: "readwrite" >
  | < T_RETURN: "return" >
  | < T_THEN: "then" >
  | < T_THIS: "this" >
  | < T_TRUE: "true" >
  | < T_TYPEOF: "typeof" >
  | < T_USING: "using" >
  | < T_WHEN: "when" >
  | < T_WHILE: "while" >
  | < T_WRITEONLY: "writeonly" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL>
      | <HEX_LITERAL>
  >
|
  < #DECIMAL_LITERAL: (["0"-"9"])+ >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | "u" ["0"-"9","a"-"f","A"-"F"]["0"-"9","a"-"f","A"-"F"]["0"-"9","a"-"f","A"-"F"]["0"-"9","a"-"f","A"-"F"]
            )
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | "u" ["0"-"9","a"-"f","A"-"F"]["0"-"9","a"-"f","A"-"F"]["0"-"9","a"-"f","A"-"F"]["0"-"9","a"-"f","A"-"F"]
            )
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <GREECE_LETTER> (["0"-"9"])* 
| <LETTER> (<PART_LETTER>)* >
| < #LETTER:
      [
		 "_",
         "A"-"Z",
         "a"-"z"
      ]
  >
| < #PART_LETTER:
      [
         "_",
         "0"-"9",
         "A"-"Z",
         "a"-"z"
      ]
  >
| < #GREECE_LETTER:
      [
		 "\u03B1"-"\u03C9", //Greece lowercase letter
		 "\u0391"-"\u03A9"  //Greece uppercase letter
      ]
  >

}

/*****************************************
 * Main Entry *
 *****************************************/
SimpleNode* CompilationUnit() #CompilationUnit:
{}
{
	PackageDecl()
	( UsingDecl() )*
	( LOOKAHEAD( Modifiers() "const" ) ConstDecl() )*
	( PackagePropertyDecl() )*
	( LOOKAHEAD( "local" Name() ) PackageVariableDecl() )*
	( PackageFunctionDecl() )*

	{ 
		return jjtThis; 
	}
}

void PackageDecl() #PackageDecl :
{}
{
	"package" ComplexName() ";"
}

void UsingDecl() #UsingDecl :
{}
{
	"using" ComplexName() [ "." "*" ] [ "alias" Name() ] ";"
}

void ConstDecl() #ConstDecl :
{}
{
	Modifiers() "const" Name() "=" Exp() ";"
}

void PackagePropertyDecl() #PackagePropertyDecl :
{}
{
	"property" [ "readonly" | "readwrite" | "writeonly" ] Name() "=" Exp() ";"
}

void PackageVariableDecl() #PackageVariableDecl :
{}
{
	"local" Name() [ "=" Exp() ] ";"
}

void PackageFunctionDecl() #PackageFunctionDecl :
{}
{
	Modifiers() "function" Name() "(" [ FormalParams()  ] ")" [ "return" "(" ResultParams() ")" ] "is"
	ScopeBlock()
	"end"
}

void FormalParams() #FormalParams :
{}
{
	FormalParam() ( "," FormalParam() )*
}

void FormalParam() #FormalParam :
{}
{
	Name() [ "=" Exp() ]
	| "..." Name()
}

void ResultParams() #ResultParams :
{}
{
	ResultParam() ( "," ResultParam() )*
}

void ResultParam() #ResultParam :
{}
{
	Name()
	| "..." Name()
}

void Name() #Name :
{}
{
	<IDENTIFIER>
}

void ComplexName() #ComplexName :
{}
{
	Name() ( LOOKAHEAD(2) "." Name() )*
}

void ComplexNameList() #NameList :
{}
{
	ComplexName() ( "," ComplexName() )*
}

void Modifiers() #Modifiers :
{}
{
	( Modifier() )+
}

void Modifier() #Modifier :
{}
{
	( "public" | "local" )
}

void Literal() :
{}
{
	<INTEGER_LITERAL>
	| <FLOATING_POINT_LITERAL>
	| <CHARACTER_LITERAL>
	| <STRING_LITERAL>
	| BooleanLiteral()
	| NullLiteral()
}

void BooleanLiteral() :
{}
{
	"true"
	| "false"
}

void NullLiteral() :
{}
{
	"nil"
}

void ScopeBlock() #ScopeBlock :
{}
{
    ( LocalVariableDecl() )*
    ( Stmt() )*
    [ EndStmt() ]
}

void LocalVariableDecl() #LocalVariableDecl :
{}
{
    "local" VariableDecl() ( "," VariableDecl() )* ";"
}

void VariableDecl() #VariableDecl :
{}
{
    Name() [ "=" Exp() ]
}

void Stmt() #Stmt :
{}
{
	(
    LOOKAHEAD( PrimaryExpression() "(" ) FunctionCallStat()
    | AssignmentStat()
    | IfStat()
    | ForStat()
    | WhileStat()
    | CaseStat()
    )
}

void FunctionCallStat() #FunctionCallStat:
{}
{
	PrimaryExpression() Arguments() ";"
}

void AssignmentStat() #AssignmentStat:
{}
{
	PrimaryExpression() AssignmentOperator() Exp() ";"
}

void IfStat() #IfStat:
{}
{
	"if" Exp() "then" ScopeBlock()
	( "elif" Exp() "then" ScopeBlock() )*
	[ "else" ScopeBlock() ]
	"end"
}

void ForStat() #ForStat:
{}
{
	"for" Name() "=" Exp() "," Exp() [ "," Exp() ] "alias" Name() "do"
	ScopeBlock()
	"end"
}

void WhileStat() #WhileStat:
{}
{
	"while" Exp() "alias" Name() "do"
	ScopeBlock()
	"end"
}

void CaseStat() #CaseStat:
{}
{
	"case" PrimaryExpression()
	( "when" LiteralList() "then" ScopeBlock() )*
	[ "default" ScopeBlock() ]
	"end"
}

void LiteralList() #LiteralList:
{}
{
	Literal() ( "," Literal() )*
}

void EndStmt() #EndStmt:
{}
{
	(
  	ReturnStat()
   	| ContinueStat()
    | BreakStat()
    )
}

void ReturnStat() #ReturnStat:
{}
{
	"return" ";"
}

void ContinueStat() #ContinueStat:
{}
{
	"continue" [ Name() ] ";"
}

void BreakStat() #BreakStat:
{}
{
	"break" [ Name() ] ";"
}

void PrimaryExpression() #PrimaryExpression:
{}
{
	PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix() #PrimaryPrefix:
{}
{
	Literal()
	| "this"
	| Name()
}

void PrimarySuffix() #PrimarySuffix:
{}
{
	"[" Exp() [ ":" Exp() ] [ "," Exp() [ ":" Exp() ] ] "]"
	| "." Name()
	| Arguments()
}

void Arguments() :
{}
{
  "(" [ ExpList() ] ")"
}

void ExpList() :
{}
{
	Exp() ( "," Exp() )*
}

void Exp() :
{}
{
	PrimaryExpression() [ ( "++" | "--" ) ]
	| ConditionalExpression()
	| ArrayDecl()
	| DictDecl()
}

void ArrayDecl():
{}
{
	"[" [ ExpList() ] "]"
}

void DictDecl():
{}
{
	"{" [ PairDecl() ( "," PairDecl() )* ] "}"
}

void PairDecl():
{}
{
	Exp() ":" Exp()
}

void AssignmentOperator() :
{}
{
  "=" | "*=" | "/=" | "%=" | "+=" | "-=" | "&=" | "^=" | "|="
}

void ConditionalExpression() :
{}
{
  ConditionalOrExpression() [ "?" Exp() ":" ConditionalExpression() ]
}

void ConditionalOrExpression() :
{}
{
  ConditionalAndExpression() ( ("||" | "or") ConditionalAndExpression() )*
}

void ConditionalAndExpression() :
{}
{
  InclusiveOrExpression() ( ("&&" | "and") InclusiveOrExpression() )*
}

void InclusiveOrExpression() :
{}
{
  ExclusiveOrExpression() ( "|" ExclusiveOrExpression() )*
}

void ExclusiveOrExpression() :
{}
{
  AndExpression() ( "^" AndExpression() )*
}

void AndExpression() :
{}
{
  EqualityExpression() ( "&" EqualityExpression() )*
}

void EqualityExpression() :
{}
{
  InstanceOfExpression() ( ( "==" | "~=" ) InstanceOfExpression() )*
}

void InstanceOfExpression() :
{}
{
  RelationalExpression() [ "typeof" ComplexName() ]
}

void RelationalExpression() :
{}
{
  ShiftExpression() ( ( "<" | ">" | "<=" | ">=" ) ShiftExpression() )*
}

void ShiftExpression() :
{}
{
  AdditiveExpression() ( ( "<<" | ">>" | ">>>" ) AdditiveExpression() )*
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression() ( ( "+" | "-" ) MultiplicativeExpression() )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression() ( ( "*" | "/" | "%" ) UnaryExpression() )*
}

void UnaryExpression() :
{}
{
  ( "+" | "-" ) PrimaryExpression()
|
  UnaryExpressionNotPlusMinus()
}

void UnaryExpressionNotPlusMinus() :
{}
{
  ( "~" | "!" | "#" ) PrimaryExpression()
}
